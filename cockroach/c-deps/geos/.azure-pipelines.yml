# Azure Pipelines for GEOS
# All builds are based on the CMake configuration.
#
# Author: Mateusz Loskot <mateusz at loskot dot net>

# trigger:
#   branches:
#     include:
#     - master
#     - bugfix/*
#     - feature/*
#     - fix/*
#     - pr/*

pr:
  branches:
    include:
    - main

variables:
  - name: BUILD_TYPE
    value: Release
  - name: MAKEFLAGS
    value: -j2

stages:

- stage: Test
  jobs:

  - job: 'Linux'
    strategy:
      matrix:
        GCC 12:
          CXXSTD: 11, 20
          CXX: g++-12
          PACKAGES: g++-12
          VM_IMAGE: ubuntu-22.04
          VM_NAME: jammie
        GCC 11:
          CXXSTD: 11, 20
          CXX: g++-11
          PACKAGES: g++-11
          VM_IMAGE: ubuntu-20.04
          VM_NAME: focal
        GCC 10:
          CXXSTD: 11, 17
          CXX: g++-10
          PACKAGES: g++-10
          VM_IMAGE: ubuntu-20.04
          VM_NAME: focal
        GCC 9:
          CXXSTD: 11, 14
          CXX: g++-9
          PACKAGES: g++-9
          VM_IMAGE: ubuntu-20.04
          VM_NAME: focal
        GCC 8:
          CXXSTD: 11
          CXX: g++-8
          PACKAGES: g++-8
          VM_IMAGE: ubuntu-20.04
          VM_NAME: focal
        GCC 7:
          CXXSTD: 11
          CXX: g++-7
          PACKAGES: g++-7
          VM_IMAGE: ubuntu-20.04
          VM_NAME: focal
        GCC 6:
          CXXSTD: 11
          CXX: g++-6
          PACKAGES: g++-6
          VM_IMAGE: ubuntu-18.04
          VM_NAME: focal
        GCC 5:
          CXXSTD: 11
          CXX: g++-5
          PACKAGES: g++-5
          VM_IMAGE: ubuntu-18.04
          VM_NAME: focal
        GCC 4.8:
          CXXSTD: 11
          CXX: g++-4.8
          PACKAGES: g++-4.8
          VM_IMAGE: ubuntu-18.04
          VM_NAME: focal
        Clang 12:
          CXXSTD: 11, 20
          CXX: clang++-12
          PACKAGES: clang-12
          LLVM_REPO: llvm-toolchain-focal-12
          VM_IMAGE: ubuntu-20.04
          VM_NAME: focal
        Clang 11:
          CXXSTD: 11, 17
          CXX: clang++-11
          PACKAGES: clang-11
          LLVM_REPO: llvm-toolchain-focal-11
          VM_IMAGE: ubuntu-20.04
          VM_NAME: focal
        Clang 10:
          CXXSTD: 11, 14
          CXX: clang++-10
          PACKAGES: clang-10
          LLVM_REPO: llvm-toolchain-focal-10
          VM_IMAGE: ubuntu-20.04
          VM_NAME: focal
        Clang 9:
          CXXSTD: 11
          CXX: clang++-9
          PACKAGES: clang-9
          LLVM_REPO: llvm-toolchain-focal-9
          VM_IMAGE: ubuntu-20.04
          VM_NAME: focal
        Clang 8:
          CXXSTD: 11
          CXX: clang++-8
          PACKAGES: clang-8
          LLVM_REPO: llvm-toolchain-bionic-8
          VM_IMAGE: ubuntu-18.04
          VM_NAME: bionic
        Clang 7:
          CXXSTD: 11
          CXX: clang++-7
          PACKAGES: clang-7
          LLVM_REPO: llvm-toolchain-bionic-7
          VM_IMAGE: ubuntu-18.04
          VM_NAME: bionic
        # Clang 6:
        #   CXXSTD: 11
        #   CXX: clang++-6.0
        #   PACKAGES: clang-6.0
        #   LLVM_REPO: llvm-toolchain-bionic-6.0
        #   VM_IMAGE: ubuntu-18.04
        #   VM_NAME: bionic
        # Clang 5:
        #   CXXSTD: 11
        #   PACKAGES: clang-5.0
        #   CXX: clang++-5.0
        #   LLVM_REPO: llvm-toolchain-bionic-5.0
        #   VM_IMAGE: ubuntu-18.04
        #   VM_NAME: bionic
    pool:
      vmImage: $(VM_IMAGE)
    steps:
    - script: |
        set -e
        uname -a
        sudo -E apt-add-repository -y "ppa:ubuntu-toolchain-r/test"
        if test -n "${LLVM_REPO}" ; then
          wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
          sudo -E apt-add-repository "deb http://apt.llvm.org/${VM_NAME}/ ${LLVM_REPO} main"
        fi
        sudo -E apt-get update
        sudo -E apt-get -yq --no-install-suggests --no-install-recommends install cmake ${PACKAGES}
      displayName: 'Install'
    - script: |
        set -e
        mkdir build.cxx11
        cd build.cxx11
        cmake --version
        cmake -DCMAKE_CXX_STANDARD=11 -DCMAKE_BUILD_TYPE=$BUILD_TYPE ..
        cmake --build . --config $BUILD_TYPE
        ctest -V --output-on-failure -C $BUILD_TYPE
      displayName: 'Build C++11'
      condition: contains(variables['CXXSTD'], '11')
    - script: |
        set -e
        mkdir build.cxx14
        cd build.cxx14
        cmake --version
        cmake -DCMAKE_CXX_STANDARD=14 -DCMAKE_BUILD_TYPE=$BUILD_TYPE ..
        cmake --build . --config $BUILD_TYPE
        ctest -V --output-on-failure -C $BUILD_TYPE
      displayName: 'Build C++14'
      condition: contains(variables['CXXSTD'], '14')
    - script: |
        set -e
        mkdir build.cxx17
        cd build.cxx17
        cmake --version
        cmake -DCMAKE_CXX_STANDARD=17 -DCMAKE_BUILD_TYPE=$BUILD_TYPE ..
        cmake --build . --config $BUILD_TYPE
        ctest -V --output-on-failure -C $BUILD_TYPE
      displayName: 'Build C++17'
      condition: contains(variables['CXXSTD'], '17')
    - script: |
        set -e
        mkdir build.cxx20
        cd build.cxx20
        cmake --version
        cmake -DCMAKE_CXX_STANDARD=20 -DCMAKE_BUILD_TYPE=$BUILD_TYPE ..
        cmake --build . --config $BUILD_TYPE
        ctest -V --output-on-failure -C $BUILD_TYPE
      displayName: 'Build C++20'
      condition: contains(variables['CXXSTD'], '20')

  - job: 'Windows'
    strategy:
      matrix:
        # VS 2022 C++20:
        #   TOOLSET: msvc-14.3
        #   CXXSTD: 20
        #   VM_IMAGE: 'windows-2022'
        VS 2019 C++20 x64:
          TOOLSET: msvc-14.2
          CXXSTD: 20
          VM_IMAGE: 'windows-2019'
          ARCH: x64
        VS 2019 C++20 ARM64:
          TOOLSET: msvc-14.2
          CXXSTD: 20
          VM_IMAGE: 'windows-2019'
          ARCH: ARM64

    pool:
      vmImage: $(VM_IMAGE)
    steps:
    - powershell: |
        Write-Host "Installing CMake 3.14.7"
        Invoke-WebRequest https://cmake.org/files/v3.14/cmake-3.14.7-win64-x64.zip -OutFile C:\cmake-3.14.7-win64-x64.zip
        Expand-Archive C:\cmake-3.14.7-win64-x64.zip -DestinationPath C:\
        Rename-Item -Path C:\cmake-3.14.7-win64-x64 -NewName C:\cmake
        Write-Host "##vso[task.prependpath]C:\cmake\bin"
      displayName: 'Install'
    - script: |
        mkdir build.cxx%CXXSTD%.%ARCH%
        cd build.cxx%CXXSTD%.%ARCH%
        cmake --version
        cmake -DCMAKE_CXX_STANDARD=%CXXSTD% -DBUILD_SHARED_LIBS=ON -A %ARCH% ..
      displayName: 'CMake'
    - script: |
        cd build.cxx%CXXSTD%.%ARCH%
        cmake --build . --config %BUILD_TYPE%
      displayName: 'Build'
    - script: |
        cd build.cxx%CXXSTD%.%ARCH%
        ctest -V --output-on-failure -C %BUILD_TYPE%
      displayName: 'Test'
      condition: and(succeeded(), eq(variables['ARCH'], 'x64'))

  - job: 'macOS'
    pool:
      vmImage: 'macOS-10.15'
    strategy:
      matrix:
        # https://github.com/actions/virtual-environments/blob/main/images/macos/macos-10.15-Readme.md#xcode
        Xcode 12.4:
          TOOLSET: clang
          CXXSTD: 11, 14, 20
          XCODE_APP: /Applications/Xcode_12.4.app
        Xcode 11.7:
          TOOLSET: clang
          CXXSTD: 11, 17
          XCODE_APP: /Applications/Xcode_11.7.app
        Xcode 10.3:
          TOOLSET: clang
          CXXSTD: 11
          XCODE_APP: /Applications/Xcode_10.3.app
    steps:
    - script: |
        set -e
        uname -a
        sudo xcode-select -switch ${XCODE_APP}
        which clang++
        clang++ --version
      displayName: Install
    - script: |
        set -e
        mkdir build.cxx11
        cd build.cxx11
        cmake --version
        cmake -DCMAKE_CXX_STANDARD=11 -DCMAKE_BUILD_TYPE=$BUILD_TYPE ..
        cmake --build . --config $BUILD_TYPE
        ctest -V --output-on-failure -C $BUILD_TYPE
      displayName: 'Build C++11'
      condition: contains(variables['CXXSTD'], '11')
    - script: |
        set -e
        mkdir build.cxx14
        cd build.cxx14
        cmake --version
        cmake -DCMAKE_CXX_STANDARD=14 -DCMAKE_BUILD_TYPE=$BUILD_TYPE ..
        cmake --build . --config $BUILD_TYPE
        ctest -V --output-on-failure -C $BUILD_TYPE
      displayName: 'Build C++14'
      condition: contains(variables['CXXSTD'], '14')
    - script: |
        set -e
        mkdir build.cxx17
        cd build.cxx17
        cmake --version
        cmake -DCMAKE_CXX_STANDARD=17 -DCMAKE_BUILD_TYPE=$BUILD_TYPE ..
        cmake --build . --config $BUILD_TYPE
        ctest -V --output-on-failure -C $BUILD_TYPE
      displayName: 'Build C++17'
      condition: contains(variables['CXXSTD'], '17')
    - script: |
        set -e
        mkdir build.cxx20
        cd build.cxx20
        cmake --version
        cmake -DCMAKE_CXX_STANDARD=20 -DCMAKE_BUILD_TYPE=$BUILD_TYPE ..
        cmake --build . --config $BUILD_TYPE
        ctest -V --output-on-failure -C $BUILD_TYPE
      displayName: 'Build C++20'
      condition: contains(variables['CXXSTD'], '20')

  - job: Code_quality_checks
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - script: |
        set -e
        sudo -E apt-get update
        sudo -E apt-get -yq --no-install-suggests --no-install-recommends install cppcheck
        ./tools/cppcheck.sh
      displayName: 'cppcheck'
